name: Test and Publish Docker Image

on:
  push:
    branches: [main]

jobs:
  test:
    name: Run Test Cases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.19", "1.20", "1.21", "1.22"]

    services:
      postgres:
        image: postgres:14.8-alpine
        env:
          POSTGRES_USER: boilerplate
          POSTGRES_PASSWORD: boilerplate
          POSTGRES_DB: boilerplate
          POSTGRES_SCHEMA: boilerplate_schema
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      # - name: Create and start virtual environment
      #   run: |
      #     python -m venv .venv
      #     source .venv/bin/activate

      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install poetry

      # - name: Get Poetry cache files location
      #   id: poetry-cache
      #   # run: echo "::set-output name=dir::$(poetry config cache-dir)"
      #   run: echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: Cache dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.poetry-cache.outputs.dir }}
      #     key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-poetry-

      # - name: Install Dependencies with Poetry
      #   run: poetry install

      - name: Install Dependencies
        run: go mod tidy

      - name: Wait for PostgreSQL to become ready
        run: |
          while ! pg_isready -h localhost -p 5432 > /dev/null 2> /dev/null; do
            sleep 1
          done

      # - name: Install PostgreSQL Client
      #   run: sudo apt-get install -y postgresql-client

      # - name: Run Database Migrations
      #   run: bash scripts/run_migrations.sh
      #   env:
      #     POSTGRES_USER: projectai_test
      #     POSTGRES_PASSWORD: projectai_test
      #     POSTGRES_DB: projectai_test
      #     POSTGRES_SCHEMA: projectai_test_schema
      #     PGPASSWORD: projectai_test

      # - name: Check Code Formatting
      #   run: bash scripts/check_format.sh

      - name: Run Tests
        run: go test ./..

  # publish:
  #   name: Publish Docker Image
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-boilerplate:latest
